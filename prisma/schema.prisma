// ================================================================= //
//                           PRISMA SCHEMA                           //
// ================================================================= //

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// ================================================================= //
//                         ENUM DEFINITIONS                          //
// ================================================================= //

/// Defines the roles a user can have within the application.
enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
}

/// Defines the originator of a message in a chat simulation.
enum ChatRole {
  USER // A message sent by the human student.
  AI   // A message generated by the AI virtual patient.
}

/// Defines the current state of a user's attempt at a case.
enum AttemptStatus {
  IN_PROGRESS
  COMPLETED
  ABANDONED
}


// ================================================================= //
//                         AUTHENTICATION MODELS                     //
// ================================================================= //

/// Represents a user of the application.
model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  phone         String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  /// The user's primary role in the system.
  role             UserRole      @default(STUDENT)
  /// The educational institution the user belongs to.
  institution      String?
  /// The user's current level of study (e.g., "extern", "Intern").
  educationalLevel String?
  /// A JSON object to store metadata about the user's knowledge, perhaps for adaptive learning.
  userKnowledge    Json?

  /// A list of all case simulations this user has attempted.
  caseAttempts CaseAttempt[]
  // A list of generated case by this user.
  cases Case[]
}

/// Standard NextAuth.js model for linking OAuth accounts.
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// The Session model is crucial for the 'database' session strategy.
// It stores session information on the server-side, in your database.
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// The VerificationToken model is used for email-based sign-in (e.g., magic links).
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


// ================================================================= //
//                    APPLICATION CORE MODELS                        //
// ================================================================= //

/// Represents a single, static clinical case study.
model Case {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  /// The user who created this case
  authorId    String @db.ObjectId
  author      User  @relation(fields: [authorId], references: [id])
  /// The public-facing title of the case (e.g., "درد قفسه سینه").
  title       String
  /// A brief description of the case shown in the case library. (آقای 58 ساله با شکایت درد قفسه سینه از شب گذشته مراجعه کرده است.،)
  description String
  /// Path to rive file for characters
  riveFileUrl String?
  /// The medical specialty this case belongs to (e.g., "cardiology"). Used for categorization.
  specialty   String
  /// A list of keywords for search functionality.
  keywords    String[]

  /// a JSON object to store dynamic Likert scale-based objectives.
  learningObjectives   Json
  
  /// a JSON object to store the structured patient persona.
  systemPrompt         Json
  
  /// A list of possible differential diagnoses for the case.
  differentialDiagnosis String[]

  /// A JSON object containing the expected physical exam findings for this case.
  physicalExamFindings Json?
  /// The correct final diagnosis for this case, used for evaluation.
  finalDiagnosis       String

  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  /// A list of all attempts made on this case by various users.
  attempts  CaseAttempt[]
}

/// Represents a single user's attempt to solve a specific case.
model CaseAttempt {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  /// The user who is attempting the case.
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  /// The case being attempted.
  case   Case   @relation(fields: [caseId], references: [id])
  caseId String @db.ObjectId

  /// The complete history of messages for this specific attempt.
  messages ChatMessage[]
  // A log of all physical examination requests made during this attempt.
  examinationRequests PhysicalExaminationRequest[]
  /// The current status of the attempt.
  status   AttemptStatus @default(IN_PROGRESS)

  /// The user's submitted written history.
  writtenHistory    Json?
  // The score of user's conversation.
  conversation_summary_report Json?
  // The score of user's ehr accuracy.
  ehr_accuracy_report Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  /// A user can only have one attempt per case. To re-attempt, they would need to start a new one.
  @@unique([userId, caseId])
}

/// Represents a single message within a CaseAttempt's chat history.
model ChatMessage {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  /// The parent attempt this message belongs to.
  attempt   CaseAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  attemptId String      @db.ObjectId
  /// Who sent the message: the student (USER) or the virtual patient (AI).
  role      ChatRole
  /// The actual text content of the message.
  content   String      @db.String
  
  // The emotional states during simulation
  emotional_states String?
  
  createdAt DateTime    @default(now())
}

/// Represents a single physical examination request made by a user.
model PhysicalExaminationRequest {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  /// The parent attempt this request belongs to.
  attempt   CaseAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  attemptId String      @db.ObjectId
  /// The category of the exam (e.g., "معاینه قلب").
  category  String
  /// The specific command the user entered (e.g., "سمع قلب").
  request   String      @db.String
  /// The response generated by the AI.
  response  String      @db.String
  createdAt DateTime    @default(now())
}