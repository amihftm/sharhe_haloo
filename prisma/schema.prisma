generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum ChatRole {
  USER
  AI
}

enum AttemptStatus {
  IN_PROGRESS
  COMPLETED
  ABANDONED
}

type CaseAttemptConversationSummaryReport {
  interpersonal_skills  CaseAttemptConversationSummaryReportInterpersonalSkills
  learning_objectives   CaseAttemptConversationSummaryReportLearningObjectives
  questioning_technique CaseAttemptConversationSummaryReportQuestioningTechnique
}

type CaseAttemptConversationSummaryReportInterpersonalSkills {
  feedback String
  score    Int
}

type CaseAttemptConversationSummaryReportLearningObjectives {
  achieved_items String[]
  max_score      Int
  missed_items   String[]
  score          Int
}

type CaseAttemptConversationSummaryReportQuestioningTechnique {
  feedback String
  score    Int
}

type CaseAttemptEhrAccuracyReport {
  final_score CaseAttemptEhrAccuracyReportFinalScore
  sections    CaseAttemptEhrAccuracyReportSections[]
}

type CaseAttemptEhrAccuracyReportFinalScore {
  max_total_score Int
  total_score     Int
}

type CaseAttemptEhrAccuracyReportSections {
  justification String
  max_points    Int
  score         Int
  section_name  String
}

type CaseAttemptWrittenHistory {
  allergies          String
  chiefComplaint     String
  drugHistory        String
  familyHistory      String
  pastMedicalHistory String
  presentIllness     String
  reviewOfSystems    String
  socialHistory      String
}

type CaseLearningObjectives {
  category  String
  id        String
  score     Int
  statement String
}

type CasePhysicalExamFindings {
  raw String
}

type CaseSystemPrompt {
  chiefComplaint        String
  demographics          CaseSystemPromptDemographics
  drugHistory           String
  education             String
  emotional_state       String
  familyHistory         String
  pastMedicalHistory    String
  pastSurgicalHistory   String
  persona               String
  presentIllnessHistory String
  reviewOfSystems       CaseSystemPromptReviewOfSystems
  socialHistory         String
}

type CaseSystemPromptDemographics {
  age            Int
  birthLocation  String
  gender         String
  livingLocation String
  name           String
}

type CaseSystemPromptReviewOfSystems {
  negative CaseSystemPromptReviewOfSystemsNegative[]
  positive CaseSystemPromptReviewOfSystemsPositive[]
}

type CaseSystemPromptReviewOfSystemsNegative {
  value String
}

type CaseSystemPromptReviewOfSystemsPositive {
  value String
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Case {
  id                    String                   @id @default(auto()) @map("_id") @db.ObjectId
  title                 String
  author                User  @relation(fields: [authorId], references: [id])
  authorId              String                   @db.ObjectId
  description           String
  riveFileUrl           String
  specialty             String
  keywords              String[]
  learningObjectives    CaseLearningObjectives[]
  systemPrompt          CaseSystemPrompt
  physicalExamFindings  CasePhysicalExamFindings
  differentialDiagnosis String[]
  finalDiagnosis        String
  attempts              CaseAttempt[]
  createdAt             DateTime                 @db.Date
  updatedAt             DateTime                 @db.Date
}

model CaseAttempt {
  id                          String                               @id @default(auto()) @map("_id") @db.ObjectId
  userId                      String                               @db.ObjectId
  user                        User   @relation(fields: [userId], references: [id])
  caseId                      String                               @db.ObjectId
  case                        Case   @relation(fields: [caseId], references: [id])
  messages                    ChatMessage[]
  examinationRequests         PhysicalExaminationRequest[]
  status                      AttemptStatus                        @default(IN_PROGRESS)
  writtenHistory              CaseAttemptWrittenHistory
  conversation_summary_report CaseAttemptConversationSummaryReport
  ehr_accuracy_report         CaseAttemptEhrAccuracyReport
  createdAt                   DateTime                             @db.Date
  updatedAt                   DateTime                             @db.Date
  @@unique([userId, caseId])
}

model ChatMessage {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  attempt          CaseAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  attemptId        String   @db.ObjectId
  role             ChatRole
  content          String   @db.String
  emotional_states String?
  createdAt        DateTime @db.Date
}

model PhysicalExaminationRequest {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  attempt   CaseAttempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  attemptId String   @db.ObjectId
  category  String
  request   String   @db.String
  response  String   @db.String
  createdAt DateTime @default(now())
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  phone         String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]

  /// The user's primary role in the system.
  role             UserRole      @default(STUDENT)
  /// The educational institution the user belongs to.
  institution      String?
  /// The user's current level of study (e.g., "extern", "Intern").
  educationalLevel String?
  /// A JSON object to store metadata about the user's knowledge, perhaps for adaptive learning.
  userKnowledge    Json?

  /// A list of all case simulations this user has attempted.
  caseAttempts CaseAttempt[]
  // A list of generated case by this user.
  cases Case[]
}